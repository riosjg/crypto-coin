{"version":3,"sources":["crypto.png","hooks/useCurrency.js","hooks/useCrypto.js","components/Error.js","components/Form.js","components/Quote.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useCurrency","initialState","options","useState","state","setState","onChange","e","target","value","map","o","i","key","code","name","useCrypto","console","log","CoinInfo","Name","FullName","MessageError","p","Error","message","Button","input","Form","setCurrency","setCrypto","cryptoList","setCryptoList","error","setError","currency","SelectCurrency","crypto","SelectCrypto","useEffect","a","Axios","get","res","data","Data","fetchAPI","onSubmit","preventDefault","trim","type","ResultDiv","div","Paragraph","Price","Quote","result","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Container","Image","img","Heading","h1","App","setResult","loading","setLoading","url","axios","setTimeout","DISPLAY","fetchData","component","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3cd779b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crypto.96e45d69.png\";","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useCurrency = (label, initialState, options) => {\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n    const Selection = () => (\r\n        <>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => setState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=''>Select</option>\r\n                {options.map((o, i) => (\r\n                    <option key={i} value={o.code}>{o.name}</option>\r\n                ))}\r\n            </Select>\r\n        </>\r\n    );\r\n\r\n    return [state, Selection]; \r\n}\r\n\r\nexport default useCurrency;","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useCrypto = (label, initialState, options) => {\r\n\r\n    console.log(options);\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n    const SelectCrypto = () => (\r\n        <>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => setState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=''>Select</option>\r\n                {options.map((o, i) => (\r\n                    <option key={i} value={o.CoinInfo.Name}>{o.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </>\r\n    );\r\n\r\n    return [state, SelectCrypto]; \r\n}\r\n\r\nexport default useCrypto;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MessageError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #fff;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <MessageError>{message}</MessageError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useCurrency from '../hooks/useCurrency';\r\nimport useCrypto from '../hooks/useCrypto';\r\nimport Axios from 'axios';\r\nimport Error from './Error'\r\n\r\nconst Button = styled.input`\r\n    margin-top: 20px;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66a2fe;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    color: #FFF;\r\n    transition: background-color .3s ease;\r\n\r\n    &:hover{\r\n        background-color: #326AC0;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Form = ({setCurrency, setCrypto}) => {\r\n\r\n    //crypto list\r\n    const [cryptoList, setCryptoList] = useState([]);\r\n    const [error, setError] = useState(false);\r\n\r\n    const currencies = [\r\n        { code: 'USD', name: 'USA Dolar'},\r\n        { code: 'ARS', name: 'Argentinian Peso'},\r\n        { code: 'EUR', name: 'Euro'},\r\n        { code: 'GBP', name: 'British pound sterling'}\r\n    ]\r\n\r\n    const [ currency, SelectCurrency] = useCurrency('Choose your currency', '', currencies);\r\n\r\n    const [ crypto, SelectCrypto] = useCrypto('Choose your crypto', '', cryptoList);\r\n\r\n    useEffect( () => {\r\n        const fetchAPI = async () =>{\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n            const res = await Axios.get(url);\r\n\r\n            setCryptoList(res.data.Data);\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const quoteCurrency = e => {\r\n        e.preventDefault();\r\n\r\n        if(currency.trim() === '' || crypto.trim() === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        setCurrency(currency);\r\n        setCrypto(crypto);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={quoteCurrency}\r\n        >\r\n\r\n            {error ? <Error message='Every field must be completed.' /> : null}\r\n\r\n            <SelectCurrency />\r\n\r\n            <SelectCrypto />\r\n            \r\n            <Button\r\n                type='submit'\r\n                value='Calculate'\r\n            />\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ResultDiv = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n    font-size: 18px;\r\n\r\n    span {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst Price = styled.p`\r\n    font-size: 30px;\r\n`;\r\n\r\nconst Quote = ({result}) => {\r\n    if(Object.keys(result).length === 0){\r\n        return null;\r\n    }\r\n    console.log(result);\r\n\r\n    return ( \r\n        <ResultDiv>\r\n            <Price>The price is: <span>{result.PRICE}</span></Price>\r\n            <Paragraph>Highest price of the day: <span>{result.HIGHDAY}</span></Paragraph>\r\n            <Paragraph>Lowest price of the day: <span>{result.LOWDAY}</span></Paragraph>\r\n            <Paragraph>Variaton in the last 24 hours: <span>{result.CHANGEPCT24HOUR}</span></Paragraph>\r\n            <Paragraph>Last update: <span>{result.LASTUPDATE}</span></Paragraph>\r\n        </ResultDiv>\r\n     );\r\n}\r\n \r\nexport default Quote;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"spinner\">\r\n            <div className=\"bounce1\"></div>\r\n            <div className=\"bounce2\"></div>\r\n            <div className=\"bounce3\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport axios from 'axios'\nimport img from './crypto.png'\nimport Form from './components/Form'\nimport Quote from './components/Quote'\nimport Spinner from './components/Spinner';\n\nconst Container = styled.div`\n    max-width: 900px;\n    margin: 0 auto;\n    @media (min-width: 992px){\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      column-gap: 2rem;\n    }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after{\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n\n  const [currency, setCurrency] = useState('');\n  const [crypto, setCrypto] = useState('');\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect( () => {\n\n    const fetchData = async () =>{\n      if(currency === ''){\n        return;\n      }\n  \n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${crypto}&tsyms=${currency}`;\n  \n      const res = await axios(url);\n\n      setLoading(true);\n\n      setTimeout( () => {\n        setLoading(false)\n      }, 3000)\n  \n      setResult(res.data.DISPLAY[crypto][currency]);\n    }\n    fetchData();\n  }, [currency, crypto])\n\n  //Show spinner or Quote\n  const component = (loading) ? <Spinner /> : <Quote result={result} />\n\n  return (\n    <Container>\n      <div>\n        <Image\n          src={img}\n          alt=\"crypto photo\"\n        />\n      </div>\n      <div>\n        <Heading>Quote crypto at the moment!</Heading>\n\n        <Form \n          setCurrency={setCurrency}\n          setCrypto={setCrypto}\n        />\n\n        {component}\n\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}